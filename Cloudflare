#!/bin/bash

# ===============================
# üöÄ Interactive Cloudflare Tunnel Setup
# ===============================

echo "üöÄ Cloudflare Tunnel Setup Starting..."

# Step 1: Install Cloudflared
echo "1Ô∏è‚É£ Downloading & Installing cloudflared..."
curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
chmod +x cloudflared
sudo mv cloudflared /usr/local/bin/
echo "‚úÖ Cloudflared installed."

# Step 2: Login to Cloudflare
echo "2Ô∏è‚É£ Logging in to Cloudflare..."
cloudflared tunnel login
echo "‚úÖ Cloudflare login complete."

# Step 3: Ask user for tunnel name
read -rp "Enter a name for your tunnel: " TUNNEL_NAME
if [[ -z "$TUNNEL_NAME" ]]; then
    echo "‚ùå Tunnel name cannot be empty!"
    exit 1
fi

# Step 4: Create tunnel
TUNNEL_CREATE_OUTPUT=$(cloudflared tunnel create "$TUNNEL_NAME")
TUNNEL_ID=$(echo "$TUNNEL_CREATE_OUTPUT" | grep -Eo '[0-9a-f\-]{36}')

if [[ -z "$TUNNEL_ID" ]]; then
    echo "‚ùå Failed to create tunnel. Check your Cloudflare login."
    exit 1
fi

echo "‚úÖ Tunnel created with ID: $TUNNEL_ID"

# Step 5: Ask user for domain and local port
read -rp "Enter your domain (e.g., example.com): " DOMAIN
read -rp "Enter the local port to expose (e.g., 8080): " LOCAL_PORT

if [[ -z "$DOMAIN" || -z "$LOCAL_PORT" ]]; then
    echo "‚ùå Domain and port cannot be empty!"
    exit 1
fi

# Step 6: Create config file
mkdir -p ~/.cloudflared
CONFIG_FILE=~/.cloudflared/config.yml

cat <<EOF > "$CONFIG_FILE"
tunnel: $TUNNEL_ID
credentials-file: /home/$USER/.cloudflared/$TUNNEL_ID.json

ingress:
  - hostname: "$DOMAIN"
    service: http://localhost:$LOCAL_PORT
  - service: "http_status:404"
EOF

echo "‚úÖ Config file created at $CONFIG_FILE"

# Step 7: Route DNS
cloudflared tunnel route dns "$TUNNEL_NAME" "$DOMAIN"
echo "‚úÖ DNS routed for $DOMAIN"

# Step 8: Run the tunnel
echo "7Ô∏è‚É£ Running the tunnel..."
cloudflared tunnel run "$TUNNEL_NAME"

